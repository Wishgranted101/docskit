document.addEventListener("DOMContentLoaded", function() {
    const form = document.getElementById("evidenceForm");
    if (form) {
        form.addEventListener("submit", function(event) {
            event.preventDefault();
            event.stopPropagation();

            if (form.checkValidity()) {
                generatePdf();
            } else {
                form.classList.add("was-validated");
            }
        });

        const summarizeCommunicationBtn = document.getElementById("summarizeCommunicationBtn");
        if (summarizeCommunicationBtn) {
            summarizeCommunicationBtn.addEventListener("click", function() {
                alert("AI Communication Summarization (Simulated): Key points extracted from communication history.");
            });
        }

        const draftRebuttalBtn = document.getElementById("draftRebuttalBtn");
        const rebuttalOutput = document.getElementById("rebuttalOutput");
        const aiRebuttalText = document.getElementById("aiRebuttalText");

        if (draftRebuttalBtn) {
            draftRebuttalBtn.addEventListener("click", function() {
                // Simulate AI drafting
                aiRebuttalText.value = "[AI-Drafted Rebuttal Memo - This is a simulated output for demonstration purposes. In a real application, AI would generate a persuasive argument based on your inputs.]\n\nTo Whom It May Concern,\n\nThis letter serves as a formal rebuttal to the chargeback filed against Order ID: " + document.getElementById("orderId").value + ". We have thoroughly reviewed the details of this transaction and believe the chargeback is unwarranted.\n\nOur records indicate that the product/service, \"" + document.getElementById("productDescription").value + "\", was duly provided to the customer, " + document.getElementById("customerName").value + ", on " + document.getElementById("orderDate").value + ". The total amount of $" + document.getElementById("orderAmount").value + " was processed via " + document.getElementById("paymentPlatform").value + ".\n\n[Include details from tracking number, delivery date, proof of delivery photo (if uploaded), communication history, refund policy, and terms of service here.]\n\nWe kindly request a reversal of this chargeback. Thank you for your time and consideration.\n\nSincerely,\n[Your Business Name]";
                rebuttalOutput.style.display = "block";
            });
        }
    }

    function generatePdf() {
        const { jsPDF } = window.jspdf;
        const doc = new jsPDF();

        let yPos = 20;
        const margin = 15;
        const lineHeight = 7;

        doc.setFontSize(22);
        doc.text("Chargeback Evidence Pack", 105, yPos, null, null, "center");
        yPos += 15;

        doc.setFontSize(12);
        doc.text("Generated by DocsKit", 105, yPos, null, null, "center");
        yPos += 10;

        doc.setDrawColor(0, 0, 0);
        doc.line(margin, yPos, 210 - margin, yPos); // Horizontal line
        yPos += 10;

        const addSection = (title, content) => {
            if (yPos + 10 > 280) { // Check if new page is needed
                doc.addPage();
                yPos = 20;
            }
            doc.setFontSize(14);
            doc.text(title, margin, yPos);
            yPos += lineHeight;
            doc.setFontSize(10);
            const splitContent = doc.splitTextToSize(content, 210 - 2 * margin);
            doc.text(splitContent, margin, yPos);
            yPos += splitContent.length * lineHeight + 5;
            doc.line(margin, yPos, 210 - margin, yPos); // Horizontal line
            yPos += 10;
        };

        addSection("Merchant Information",
            "Business Name: " + document.getElementById("merchantName").value + "\n" +
            "Website URL: " + document.getElementById("merchantWebsite").value
        );

        addSection("Order Details",
            "Order ID: " + document.getElementById("orderId").value + "\n" +
            "Order Date: " + document.getElementById("orderDate").value + "\n" +
            "Order Amount: $" + document.getElementById("orderAmount").value + "\n" +
            "Payment Platform: " + document.getElementById("paymentPlatform").value + "\n" +
            "E-commerce Platform: " + document.getElementById("ecommercePlatform").value + "\n" +
            "Product/Service Description: " + document.getElementById("productDescription").value
        );

        addSection("Customer & Dispute Details",
            "Customer Name: " + document.getElementById("customerName").value + "\n" +
            "Customer Email: " + document.getElementById("customerEmail").value + "\n" +
            "Dispute Reason: " + document.getElementById("disputeReason").value
        );

        const trackingNumber = document.getElementById("trackingNumber").value;
        const deliveryDate = document.getElementById("deliveryDate").value;
        let shippingContent = "Tracking Number: " + (trackingNumber || "N/A") + "\n" +
                              "Delivery Date: " + (deliveryDate || "N/A");

        addSection("Shipping & Delivery Proof", shippingContent);

        const proofOfDeliveryPhoto = document.getElementById("proofOfDeliveryPhoto").files[0];
        if (proofOfDeliveryPhoto) {
            const reader = new FileReader();
            reader.onload = function(e) {
                const imgData = e.target.result;
                if (yPos + 80 > 280) { // Estimate space for image
                    doc.addPage();
                    yPos = 20;
                }
                doc.setFontSize(14);
                doc.text("Proof of Delivery Photo:", margin, yPos);
                yPos += lineHeight;
                doc.addImage(imgData, 'JPEG', margin, yPos, 80, 60); // Adjust dimensions as needed
                yPos += 70;
                doc.line(margin, yPos, 210 - margin, yPos); // Horizontal line
                yPos += 10;

                addRemainingSections();
            };
            reader.readAsDataURL(proofOfDeliveryPhoto);
        } else {
            addRemainingSections();
        }

        function addRemainingSections() {
            addSection("Communication History",
                document.getElementById("communicationHistory").value || "N/A"
            );

            addSection("Refund Policy & Terms of Service",
                "Refund Policy: " + (document.getElementById("refundPolicy").value || "N/A") + "\n" +
                "Terms of Service: " + (document.getElementById("termsOfService").value || "N/A")
            );

            addSection("Additional Evidence",
                document.getElementById("additionalEvidence").value || "N/A"
            );

            const aiRebuttal = document.getElementById("aiRebuttalText").value;
            if (aiRebuttal) {
                addSection("AI-Drafted Rebuttal Memo", aiRebuttal);
            }

            doc.setFontSize(8);
            doc.text("Disclaimer: This document is a formatting aid and does not guarantee chargeback success. DocsKit is not responsible for the accuracy of user-provided information.", margin, 290, null, null, "left");

            doc.save("chargeback_evidence_pack_" + document.getElementById("orderId").value + ".pdf");
        }
    }

    // Contact Us Modal Logic
    const contactModal = new bootstrap.Modal(document.getElementById("contactModal"));
    const contactForm = document.getElementById("contactForm");
    if (contactForm) {
        contactForm.addEventListener("submit", function(event) {
            event.preventDefault();
            event.stopPropagation();
            if (contactForm.checkValidity()) {
                alert("Thank you for your message! We will get back to you within 24 hours.");
                contactModal.hide();
                contactForm.reset();
                contactForm.classList.remove("was-validated");
            } else {
                contactForm.classList.add("was-validated");
            }
        });
    }

    // FAQ accordion functionality (Bootstrap handles most of this, but if custom JS is needed later)
    // const faqAccordions = document.querySelectorAll(".accordion-collapse");
    // faqAccordions.forEach(accordion => {
    //     accordion.addEventListener("show.bs.collapse", function() {
    //         // Logic when an FAQ item is opened
    //     });
    // });
});


